{"version":3,"file":"index.module.js","sources":["../src/converters/RGBToHSL.js","../src/converters/HSLToRGB.js","../src/converters/RGBToHex.js","../src/createColors/createDarkLightColors.js","../src/converters/hexToRGB.js","../src/converters/fullHex.js","../src/converters/knowColorsToHex.js","../src/createColors/syntaxCheckAndConvert.js","../src/createColors/runColors.js","../src/mui/muiAddObjObj.js","../src/mui/muiAddObjString.js","../src/mui/muiAddString.js","../src/mui/muiTemplate.js"],"sourcesContent":["/* from: \r\n    RGBToHSL - https://www.30secondsofcode.org/js/s/rgb-to-hsl/\r\n*/\r\n\r\n/**\r\n    @param {number} r red color (0-255)\r\n    @param {number} g green color (0-255)\r\n    @param {number} b blue color (0-255)\r\n    @returns {[hue, saturation, lightness]} array of HSL\r\n    @description convert rgb to hsl\r\n*/\r\nconst RGBToHSL = (r = 0, g = 0, b = 0) => {\r\n  r /= 255;\r\n  g /= 255;\r\n  b /= 255;\r\n  const l = Math.max(r, g, b);\r\n  const s = l - Math.min(r, g, b);\r\n  const h = s\r\n    ? l === r\r\n      ? (g - b) / s\r\n      : l === g\r\n      ? 2 + (b - r) / s\r\n      : 4 + (r - g) / s\r\n    : 0;\r\n  return [\r\n    60 * h < 0 ? 60 * h + 360 : 60 * h,\r\n    100 * (s ? (l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s))) : 0),\r\n    (100 * (2 * l - s)) / 2,\r\n  ];\r\n};\r\nexport default RGBToHSL;\r\n","/* from: \r\n    HSLToRGB - https://www.30secondsofcode.org/js/s/hsl-to-rgb/\r\n*/\r\n/**\r\n    @param {number} h hue color (0-360)\r\n    @param {number} s saturation color (0-100)\r\n    @param {number} l lightness color (0-100)\r\n    @returns {[red, green, blue]} array of RGB\r\n    @description convert hsl to rgb\r\n*/\r\nconst HSLToRGB = (h = 0, s = 0, l = 0) => {\r\n  s /= 100;\r\n  l /= 100;\r\n  const k = (n) => (n + h / 30) % 12;\r\n  const a = s * Math.min(l, 1 - l);\r\n  const f = (n) =>\r\n    l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\r\n  const f2 = (n) => Math.round(255 * f(n));\r\n  return [f2(0), f2(8), f2(4)];\r\n};\r\n\r\nexport default HSLToRGB;\r\n","/**\r\n    @param {number} r red color (0-255)\r\n    @param {number} g green color (0-255)\r\n    @param {number} b blue color (0-255)\r\n    @returns {string} color in hex\r\n    @description convert rgb to rgb in hex format\r\n*/\r\nconst RGBToHex = (r, g, b) => {\r\n  const f = (n) => {\r\n    let nn = n.toString(16);\r\n    if (nn.length != 2) return \"0\" + nn;\r\n    return nn;\r\n  };\r\n  return `#${f(r)}${f(g)}${f(b)}`;\r\n};\r\nexport default RGBToHex;\r\n","import RGBToHSL from \"../converters/RGBToHSL.js\";\r\nimport hexToRGB from \"../converters/hexToRGB.js\";\r\nimport HSLToRGB from \"../converters/HSLToRGB.js\";\r\nimport RGBToHex from \"../converters/RGBToHex.js\";\r\n\r\n/**\r\n * @typedef {object} generatedColors\r\n * @property {string} dark - dark color\r\n * @property {string} light - light color\r\n */\r\n\r\n/**\r\n *\r\n * @param {string} hexColor rgb color in hex\r\n * @returns {generatedColors} object with light color and dark color\r\n * @description create object with light color and dark color.\r\n * it will use the color to decide with color to create\r\n * for example if you provide light color it will calc dark color\r\n * and will detect light/dark automatically\r\n */\r\nconst createDarkLightColors = (hexColor) => {\r\n  const [r, g, b] = hexToRGB(hexColor);\r\n  const [h, s, l] = RGBToHSL(r, g, b);\r\n  let nL = 100 - l;\r\n  if (nL >= 35 && nL <= 44) nL -= 15;\r\n  if (nL >= 45 && nL <= 55) nL -= 35;\r\n  if (nL >= 56 && nL <= 65) nL += 10;\r\n  if (nL < 0) nL = 0;\r\n  if (nL > 100) nL = 100;\r\n  const [nr, ng, nb] = HSLToRGB(h, s, nL);\r\n  let color1 = hexColor,\r\n    color2 = RGBToHex(nr, ng, nb);\r\n  if (l > nL) return { light: color1, dark: color2 };\r\n  return { light: color2, dark: color1 };\r\n};\r\n\r\nexport default createDarkLightColors;\r\n","/* from: \r\n    hexToRGB - https://learnersbucket.com/examples/interview/convert-hex-color-to-rgb-in-javascript/\r\n*/\r\nimport fullHex from \"./fullHex.js\";\r\n/**\r\n *\r\n * @param {string} hex rgb color in hex\r\n * @returns {[red, green, blue]} array of RGB\r\n * @description convert rgb in hex format to rgb array\r\n */\r\nconst hexToRGB = (hex) => {\r\n  if (hex.length === 4) {\r\n    return fullHex(hex);\r\n  }\r\n\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n  return [r, g, b];\r\n};\r\nexport default hexToRGB;\r\n","/**\r\n *\r\n * @param {string} hex rgb color in hex\r\n * @returns {[red, green, blue]} array of RGB\r\n * @description convert rgb in hex format to rgb array\r\n */\r\nconst fullHex = (hex) => {\r\n  let r = hex.slice(1, 2);\r\n  let g = hex.slice(2, 3);\r\n  let b = hex.slice(3, 4);\r\n\r\n  r = parseInt(r + r, 16);\r\n  g = parseInt(g + g, 16);\r\n  b = parseInt(b + b, 16);\r\n\r\n  return [r, g, b];\r\n};\r\nexport default fullHex;\r\n","/*\r\n    color source from:\r\n        https://www.w3.org/wiki/CSS/Properties/color/keywords\r\n*/\r\n\r\nconst knownColors = {\r\n  black: \"#000000\",\r\n  silver: \"#c0c0c0\",\r\n  gray: \"#808080\",\r\n  white: \"#ffffff\",\r\n  maroon: \"#800000\",\r\n  red: \"#ff0000\",\r\n  purple: \"#800080\",\r\n  fuchsia: \"#ff00ff\",\r\n  green: \"#008000\",\r\n  lime: \"#00ff00\",\r\n  olive: \"#808000\",\r\n  yellow: \"#ffff00\",\r\n  navy: \"#000080\",\r\n  blue: \"#0000ff\",\r\n  teal: \"#008080\",\r\n  aqua: \"#00ffff\",\r\n  aliceblue: \"#f0f8ff\",\r\n  antiquewhite: \"#faebd7\",\r\n  aquamarine: \"#7fffd4\",\r\n  azure: \"#f0ffff\",\r\n  beige: \"#f5f5dc\",\r\n  bisque: \"#ffe4c4\",\r\n  blanchedalmond: \"#ffebcd\",\r\n  blueviolet: \"#8a2be2\",\r\n  brown: \"#a52a2a\",\r\n  burlywood: \"#deb887\",\r\n  cadetblue: \"#5f9ea0\",\r\n  chartreuse: \"#7fff00\",\r\n  chocolate: \"#d2691e\",\r\n  coral: \"#ff7f50\",\r\n  cornflowerblue: \"#6495ed\",\r\n  cornsilk: \"#fff8dc\",\r\n  crimson: \"#dc143c\",\r\n  cyan: \"#00ffff\",\r\n  darkblue: \"#00008b\",\r\n  darkcyan: \"#008b8b\",\r\n  darkgoldenrod: \"#b8860b\",\r\n  darkgray: \"#a9a9a9\",\r\n  darkgreen: \"#006400\",\r\n  darkgrey: \"#a9a9a9\",\r\n  darkkhaki: \"#bdb76b\",\r\n  darkmagenta: \"#8b008b\",\r\n  darkolivegreen: \"#556b2f\",\r\n  darkorange: \"#ff8c00\",\r\n  darkorchid: \"#9932cc\",\r\n  darkred: \"#8b0000\",\r\n  darksalmon: \"#e9967a\",\r\n  darkseagreen: \"#8fbc8f\",\r\n  darkslateblue: \"#483d8b\",\r\n  darkslategray: \"#2f4f4f\",\r\n  darkturquoise: \"#00ced1\",\r\n  darkviolet: \"#9400d3\",\r\n  deeppink: \"#ff1493\",\r\n  deepskyblue: \"#00bfff\",\r\n  dimgray: \"#696969\",\r\n  dodgerblue: \"#1e90ff\",\r\n  firebrick: \"#b22222\",\r\n  floralwhite: \"#fffaf0\",\r\n  forestgreen: \"#228b22\",\r\n  gainsboro: \"#dcdcdc\",\r\n  ghostwhite: \"#f8f8ff\",\r\n  gold: \"#ffd700\",\r\n  goldenrod: \"#daa520\",\r\n  greenyellow: \"#adff2f\",\r\n  honeydew: \"#f0fff0\",\r\n  hotpink: \"#ff69b4\",\r\n  indianred: \"#cd5c5c\",\r\n  indigo: \"#4b0082\",\r\n  ivory: \"#fffff0\",\r\n  khaki: \"#f0e68c\",\r\n  lavender: \"#e6e6fa\",\r\n  lavenderblush: \"#fff0f5\",\r\n  lawngreen: \"#7cfc00\",\r\n  lemonchiffon: \"#fffacd\",\r\n  lightblue: \"#add8e6\",\r\n  lightcoral: \"#f08080\",\r\n  lightcyan: \"#e0ffff\",\r\n  lightgoldenrodyellow: \"#fafad2\",\r\n  lightgray: \"#d3d3d3\",\r\n  lightgreen: \"#90ee90\",\r\n  lightgrey: \"#d3d3d3\",\r\n  lightpink: \"#ffb6c1\",\r\n  lightsalmon: \"#ffa07a\",\r\n  lightseagreen: \"#20b2aa\",\r\n  lightskyblue: \"#87cefa\",\r\n  lightslategray: \"#778899\",\r\n  lightslategrey: \"#778899\",\r\n  lightsteelblue: \"#b0c4de\",\r\n  lightyellow: \"#ffffe0\",\r\n  limegreen: \"#32cd32\",\r\n  linen: \"#faf0e6\",\r\n  magenta: \"#ff00ff\",\r\n  mediumaquamarine: \"#66cdaa\",\r\n  mediumblue: \"#0000cd\",\r\n  mediumorchid: \"#ba55d3\",\r\n  mediumpurple: \"#9370db\",\r\n  mediumseagreen: \"#3cb371\",\r\n  mediumslateblue: \"#7b68ee\",\r\n  mediumspringgreen: \"#00fa9a\",\r\n  mediumturquoise: \"#48d1cc\",\r\n  mediumvioletred: \"#c71585\",\r\n  midnightblue: \"#191970\",\r\n  mintcream: \"#f5fffa\",\r\n  mistyrose: \"#ffe4e1\",\r\n  moccasin: \"#ffe4b5\",\r\n  navajowhite: \"#ffdead\",\r\n  oldlace: \"#fdf5e6\",\r\n  olivedrab: \"#6b8e23\",\r\n  orange: \"#ffa500\",\r\n  orangered: \"#ff4500\",\r\n  orchid: \"#da70d6\",\r\n  palegoldenrod: \"#eee8aa\",\r\n  palegreen: \"#98fb98\",\r\n  paleturquoise: \"#afeeee\",\r\n  palevioletred: \"#db7093\",\r\n  papayawhip: \"#ffefd5\",\r\n  peachpuff: \"#ffdab9\",\r\n  peru: \"#cd853f\",\r\n  pink: \"#ffc0cb\",\r\n  plum: \"#dda0dd\",\r\n  powderblue: \"#b0e0e6\",\r\n  rosybrown: \"#bc8f8f\",\r\n  royalblue: \"#4169e1\",\r\n  saddlebrown: \"#8b4513\",\r\n  salmon: \"#fa8072\",\r\n  sandybrown: \"#f4a460\",\r\n  seagreen: \"#2e8b57\",\r\n  seashell: \"#fff5ee\",\r\n  sienna: \"#a0522d\",\r\n  skyblue: \"#87ceeb\",\r\n  slateblue: \"#6a5acd\",\r\n  slategray: \"#708090\",\r\n  snow: \"#fffafa\",\r\n  springgreen: \"#00ff7f\",\r\n  steelblue: \"#4682b4\",\r\n  tan: \"#d2b48c\",\r\n  thistle: \"#d8bfd8\",\r\n  tomato: \"#ff6347\",\r\n  turquoise: \"#40e0d0\",\r\n  violet: \"#ee82ee\",\r\n  wheat: \"#f5deb3\",\r\n  whitesmoke: \"#f5f5f5\",\r\n  yellowgreen: \"#9acd32\",\r\n};\r\n\r\n/**\r\n *\r\n * @param {string} colorName - known color\r\n * @returns {string} hex color\r\n * @description convert known color to hex\r\n */\r\nconst knowColorsToHex = (colorName) => {\r\n  if (!colorName) return undefined;\r\n  colorName = colorName.trim().toLocaleLowerCase();\r\n  return knownColors[colorName];\r\n};\r\n\r\n// const cleanColors = () => {\r\n//   for (const [k, v] of Object.entries(knownColors)) {\r\n//     knownColors[k] = v.trim().toLocaleLowerCase();\r\n//   }\r\n//   console.log(knownColors);\r\n// };\r\nexport default knowColorsToHex;\r\nexport { knownColors };\r\n","import knowColorsToHex from \"../converters/knowColorsToHex.js\";\r\nimport RGBToHex from \"../converters/RGBToHex.js\";\r\nimport HSLToRGB from \"../converters/HSLToRGB.js\";\r\n\r\n/**\r\n *\r\n * @param {string[]} color - in hex, rgb, hsl, know color format\r\n * @returns {string} hex color\r\n * @description this function will get color in hex, rgb, hsl, know color format and convert it to hex\r\n */\r\n\r\nconst syntaxCheckAndConvertToHex = (...color) => {\r\n  if (!color) return null;\r\n  let swipeTheme = false;\r\n  let retColor = \"\";\r\n  let format = \"rgb\";\r\n  let startIndex = 0;\r\n  switch (color.length) {\r\n    case 1:\r\n      //hex or knownColor\r\n      color = color[0].trim();\r\n      if (color.startsWith(\"!\")) {\r\n        color = color.slice(1);\r\n        swipeTheme = true;\r\n      }\r\n      if (typeof color !== \"string\") return null;\r\n      let kolor = knowColorsToHex(color);\r\n      if (kolor) {\r\n        retColor = kolor;\r\n        break;\r\n      }\r\n      const hexFormatFull = /^#[0-9a-z]{6}$/gi;\r\n      const hexFormatHalf = /^#[0-9a-z]{3}$/gi;\r\n      color = color.startsWith(\"#\") ? color : \"#\" + color;\r\n      if (hexFormatFull.test(color) || hexFormatHalf.test(color))\r\n        retColor = color;\r\n      else return null;\r\n      break;\r\n    case 4:\r\n      swipeTheme = color[0].startsWith(\"!\");\r\n      if (color[0].includes(\"h\")) format = \"h\";\r\n      if (color[0].includes(\"r\")) format = \"r\";\r\n      startIndex = 1;\r\n    case 3:\r\n      //rgb or hsl\r\n      if (format === \"h\") {\r\n        color = HSLToRGB(\r\n          color[startIndex],\r\n          color[startIndex + 1],\r\n          color[startIndex + 2]\r\n        );\r\n        startIndex = 0;\r\n      }\r\n      retColor = RGBToHex(\r\n        color[startIndex],\r\n        color[startIndex + 1],\r\n        color[startIndex + 2]\r\n      );\r\n      break;\r\n    default:\r\n      return null;\r\n  }\r\n  return { hex: retColor, swipeTheme };\r\n};\r\n\r\nexport default syntaxCheckAndConvertToHex;\r\n","import createDarkLightColors from \"./createDarkLightColors.js\";\r\nimport syntaxCheckAndConvertToHex from \"./syntaxCheckAndConvert.js\";\r\n\r\n/**\r\n * @typedef {object} generatedColors\r\n * @property {string} dark - dark color\r\n * @property {string} light - light color\r\n */\r\n\r\n/**\r\n *\r\n * @param {string[]} hexColorOrName rgb color in hex or known color name or r,g,b\r\n * @returns {generatedColors} object with light color and dark color\r\n * @description create object with light color and dark color.\r\n * it will use the color to decide with color to create\r\n * for example if you provide light color it will calc dark color\r\n * and will detect light/dark automatically\r\n */\r\nconst runColors = (...hexColorOrName) => {\r\n  if (Array.isArray(hexColorOrName[0])) hexColorOrName = [...hexColorOrName[0]];\r\n  let res = syntaxCheckAndConvertToHex(...hexColorOrName);\r\n  if (!res) return null;\r\n  let colors = createDarkLightColors(res.hex);\r\n  if (res.swipeTheme) {\r\n    let tmp = colors.light;\r\n    colors.light = colors.dark;\r\n    colors.dark = tmp;\r\n  }\r\n  return colors;\r\n};\r\n\r\nexport default runColors;\r\n","import runColors from \"../createColors/runColors.js\";\r\n\r\n/**\r\n *\r\n * @param {lightTheme} lightTheme - lightTheme object\r\n * @param {darkTheme} darkTheme - darkTheme object\r\n * @param {string} paletteColorName - name of the palette color\r\n * @param {object} colorValue - value of the color should be object inside object\r\n * @returns {{light:Theme, dark:Theme}} object with light theme and dark theme\r\n * @description create object with light theme and dark theme for mui createTheme\r\n * it will setup the mode and colors automatically.\r\n * provide object with palette name and color.\r\n * in color you can provide object like text\r\n */\r\nconst muiAddObjObj = (lightTheme, darkTheme, paletteColorName, colorValue) => {\r\n  if (typeof colorValue !== \"object\") return null;\r\n  let colors = {};\r\n  for (let [k, v] of Object.entries(colorValue)) {\r\n    if (typeof v !== \"string\" && !Array.isArray(v)) return null;\r\n    colors = runColors(v);\r\n    lightTheme.palette[paletteColorName]\r\n      ? (lightTheme.palette[paletteColorName][k] = colors.light)\r\n      : (lightTheme.palette[paletteColorName] = { [k]: colors.light });\r\n    darkTheme.palette[paletteColorName]\r\n      ? (darkTheme.palette[paletteColorName][k] = colors.dark)\r\n      : (darkTheme.palette[paletteColorName] = { [k]: colors.dark });\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default muiAddObjObj;\r\n","import runColors from \"../createColors/runColors.js\";\r\n/**\r\n *\r\n * @param {lightTheme} lightTheme - lightTheme object\r\n * @param {darkTheme} darkTheme - darkTheme object\r\n * @param {string} paletteColorName - name of the palette color\r\n * @param {string} colorValue - value of the color\r\n * @returns {{light:Theme, dark:Theme}} object with light theme and dark theme\r\n * @description create object with light theme and dark theme for mui createTheme\r\n * it will setup the mode and colors automatically.\r\n * provide object with palette name and color.\r\n * use \".\" to separate the object and it will create object inside object\r\n */\r\nconst muiAddObjString = (\r\n  lightTheme,\r\n  darkTheme,\r\n  paletteColorName,\r\n  colorValue\r\n) => {\r\n  let pathArr = paletteColorName.split(\".\");\r\n  if (pathArr.length <= 1) return null;\r\n  const colors = runColors(colorValue);\r\n  let lr = lightTheme.palette,\r\n    lpr,\r\n    dr = darkTheme.palette,\r\n    dpr;\r\n  for (let nm of pathArr) {\r\n    lr[nm] = lr[nm] ? lr[nm] : {};\r\n    lpr = lr;\r\n    lr = lr[nm];\r\n    dr[nm] = dr[nm] ? dr[nm] : {};\r\n    dpr = dr;\r\n    dr = dr[nm];\r\n  }\r\n  let k = pathArr[pathArr.length - 1];\r\n  lpr[k] = colors.light;\r\n  dpr[k] = colors.dark;\r\n  return true;\r\n};\r\n\r\nexport default muiAddObjString;\r\n","import runColors from \"../createColors/runColors.js\";\r\n/**\r\n *\r\n * @param {lightTheme} lightTheme - lightTheme object\r\n * @param {darkTheme} darkTheme - darkTheme object\r\n * @param {string} paletteColorName - name of the palette color\r\n * @param {string} colorValue - value of the color\r\n * @returns {{light:Theme, dark:Theme}} object with light theme and dark theme\r\n * @description create object with light theme and dark theme for mui createTheme\r\n * it will setup the mode and colors automatically.\r\n * provide object with palette name and color.\r\n */\r\nconst muiAddString = (lightTheme, darkTheme, paletteColorName, colorValue) => {\r\n  let colors = runColors(colorValue);\r\n  lightTheme.palette[paletteColorName] = { main: colors.light };\r\n  darkTheme.palette[paletteColorName] = { main: colors.dark };\r\n  return true;\r\n};\r\n\r\nexport default muiAddString;\r\n","import muiAddObjObj from \"./muiAddObjObj.js\";\r\nimport muiAddObjString from \"./muiAddObjString.js\";\r\nimport muiAddString from \"./muiAddString.js\";\r\n\r\n/**\r\n *\r\n * @param {{name:color, name2:color2, ...}} [object] paletteColorsObject name of the palette and color\r\n * @returns {generatedColors} object with light theme and dark theme\r\n * @example\r\n * const templates = tmc({primary:\"#000000\", cusColor:\"#0000FF\"})\r\n * <ThemeProvider theme={isDarkTheme ? createTheme(templates.dark) : createTheme(templates.light)}>\r\n * @description create object with light theme and dark theme for mui createTheme\r\n * it will setup the mode and colors automatically.\r\n * provide object with palette name and color.\r\n * add \"!\" to color to put the darker color in light theme and vise versa\r\n */\r\nconst muiTemplate = (paletteColorsObject = {}) => {\r\n  let lightTheme = {\r\n      palette: {\r\n        mode: \"light\",\r\n      },\r\n    },\r\n    darkTheme = {\r\n      palette: {\r\n        mode: \"dark\",\r\n      },\r\n    };\r\n  for (const [colorName, colorValue] of Object.entries(paletteColorsObject)) {\r\n    if (typeof colorValue === \"string\" || Array.isArray(colorValue)) {\r\n      if (colorName.includes(\".\")) {\r\n        muiAddObjString(lightTheme, darkTheme, colorName, colorValue);\r\n      } else {\r\n        muiAddString(lightTheme, darkTheme, colorName, colorValue);\r\n      }\r\n    } else {\r\n      muiAddObjObj(lightTheme, darkTheme, colorName, colorValue);\r\n    }\r\n  }\r\n  return {\r\n    light: lightTheme,\r\n    dark: darkTheme,\r\n  };\r\n};\r\n\r\nexport default muiTemplate;\r\n"],"names":["HSLToRGB","h","s","l","k","n","a","Math","min","f2","round","max","f","RGBToHex","r","g","b","nn","toString","length","createDarkLightColors","hexColor","hex","_hexToRGB","slice","parseInt","fullHex","_RGBToHSL","RGBToHSL","nL","_HSLToRGB","color1","color2","nb","light","dark","knownColors","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","syntaxCheckAndConvertToHex","color","call","arguments","swipeTheme","retColor","format","startIndex","trim","startsWith","kolor","colorName","toLocaleLowerCase","knowColorsToHex","test","includes","runColors","hexColorOrName","Array","isArray","concat","res","apply","colors","tmp","muiAddObjObj","lightTheme","darkTheme","paletteColorName","colorValue","_i","_Object$entries","Object","entries","_lightTheme$palette$p","_darkTheme$palette$pa","_Object$entries$_i","v","palette","muiAddObjString","pathArr","split","lpr","dpr","_step","lr","dr","_iterator","_createForOfIteratorHelperLoose","done","nm","value","muiAddString","main","muiTemplate","paletteColorsObject","mode"],"mappings":"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"}